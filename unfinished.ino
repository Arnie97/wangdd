#include <IRremote.h>

int SCLK = 3;
int SDIN = 4;
int LCD_DC = 5;
int LCD_CE = 6;
int LCD_RST = 7;
static const int RECV_PIN = 11;
IRrecv irrecv(RECV_PIN);
decode_results results;

//定义ASCII字符;6 x 8 font;1 pixel space at left and bottom;index = ASCII - 32
const unsigned char font6x8[][6] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
  { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
  { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
  { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
  { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
  { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
  { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
  { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
  { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
  { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
  { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
  { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
  { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
  { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
  { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
  { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
  { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
  { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
  { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
  { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
  { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
  { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
  { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
  { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
  { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
  { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
  { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
  { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
  { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
  { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
  { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
  { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
  { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
  { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
  { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
  { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
  { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
  { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
  { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
  { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
  { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
  { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
  { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
  { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
  { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
  { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
  { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
  { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
  { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
  { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
  { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
  { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
  { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
  { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
  { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
  { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
  { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
  { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
  { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
  { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
  { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
  { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
  { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
  { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
  { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
  { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
  { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
  { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
  { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
  { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};
static const byte hanzi12x16[][24] = {
  { 0x10, 0x10, 0x90, 0x50, 0x14, 0x18, 0x10, 0x50, 0x90, 0x10, 0x10, 0x00, 0x20, 0x21, 0x10, 0x11,
    0x0A, 0x04, 0x0A, 0x11, 0x10, 0x21, 0x20, 0x00
  },//交
};

unsigned char logo [] =
{ 0xC0, 0xFC, 0xFF, 0x00, 0xFC, 0xFF, 0x1F, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x1F, 0xFF,
  0xFC, 0x00, 0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x24, 0x34, 0x14, 0x6C, 0xC5, 0x87, 0xCE, 0x7C,
  0x14, 0x34, 0x24, 0x09, 0xFB, 0xFA, 0xFD, 0xFD, 0x57, 0xFD, 0xFF, 0x57, 0xFD, 0xFC, 0x30, 0xFC,
  0xFF, 0x2B, 0xAA, 0xAA, 0xAB, 0xAB, 0xAA, 0xAA, 0x2A, 0x10, 0x17, 0x77, 0x75, 0x55, 0x55, 0x55,
  0x55, 0xD7, 0xD7, 0x10, 0xE7, 0xEF, 0xEF, 0xE8, 0xEF, 0xFF, 0xFC, 0xF8, 0xFB, 0xFF, 0xFF, 0xFF,
  0xFF, 0xF8, 0xFC, 0xEF, 0xEF, 0xE8, 0xEF, 0xEF, 0xE7, 0x00, 0x00, 0x00, 0x02, 0xC2, 0xC2, 0x03,
  0x81, 0x81, 0xC1, 0xC3, 0x82, 0x82, 0x82, 0x03, 0x03, 0x03, 0xC2, 0x02, 0xC2, 0xC2, 0x02, 0x02,
  0x03, 0x03, 0x00, 0x43, 0x43, 0x40, 0xC3, 0xC2, 0x42, 0x42, 0x42, 0x23, 0x00, 0x00, 0xC0, 0x40,
  0x80, 0x82, 0x82, 0xC2, 0xC2, 0x83, 0x81, 0x80, 0x1F, 0x3F, 0x70, 0xC1, 0x3F, 0x78, 0x47, 0x3F,
  0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x47, 0x78, 0x3F, 0xC1, 0x70, 0x3F, 0x3F, 0x07, 0x00, 0x00,
  0x89, 0xFF, 0xFF, 0x95, 0xF4, 0xF7, 0xDE, 0x54, 0xF7, 0xB5, 0x94, 0x3F, 0x3F, 0x10, 0xFF, 0x87,
  0xCF, 0x79, 0x71, 0x5F, 0x87, 0x81, 0x80, 0x92, 0x5B, 0xDB, 0x9E, 0xF6, 0x76, 0x5B, 0xD9, 0x91,
  0x90, 0xDB, 0x5F, 0xF7, 0xB5, 0xE6, 0x7F, 0x05, 0xFC, 0xFE, 0xCC, 0xE8
};

unsigned char signal_train [] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x56, 0x55, 0xF5, 0xFF, 0xFF, 0xA5, 0xA5, 0xA5, 0xFF, 0xEF,
  0xEF, 0xEF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xBF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0xE6, 0xFE, 0xFE, 0xDE, 0xC6, 0xC6, 0xC6,
  0xC6, 0xC6, 0x06, 0x06, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x18, 0x18, 0xD8, 0xF8, 0x7E, 0x1F, 0x1F, 0x19, 0x18, 0xD8, 0xD8, 0x18, 0x18, 0x18, 0x18, 0x18,
  0x18, 0x18, 0x18, 0x18, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xF2, 0x92, 0x9F, 0x9F, 0x9F, 0x92,
  0x92, 0xF2, 0xFF, 0xFF, 0xFB, 0xFB, 0xFB, 0x3B, 0x3B, 0x9B, 0x9B, 0xDB, 0xCB, 0xEB, 0xEB, 0xFB,
  0xFB, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x30, 0x78, 0x3E, 0x1F, 0x1F, 0x19, 0x38,
  0xF0, 0xE0, 0xF8, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0E, 0x0F, 0x0F, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xFF, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xBF, 0xFD, 0xD8, 0xFE,
  0xEF, 0xF9, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x20, 0x30,
  0x38, 0x1C, 0x0E, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30, 0x30,
  0x30, 0x3F, 0x3F, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x7F, 0x7F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
};

unsigned char signal_hospital [] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x20, 0x20, 0x20, 0xE0, 0xE0, 0xFE, 0xFE, 0xFE, 0xFE,
  0xFE, 0x3E, 0x3E, 0x3E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3E, 0x3E, 0x3E, 0xFE, 0xFE, 0xFE, 0xFE,
  0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x8C, 0xEC, 0xFC, 0xFC, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x00, 0x00, 0xFC, 0xFC, 0xFC,
  0x0C, 0xEC, 0xFC, 0x7C, 0x70, 0x70, 0x70, 0x30, 0x30, 0x32, 0x3F, 0x3F, 0x3C, 0x30, 0x30, 0x30,
  0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFC, 0xFF, 0xFD, 0x7C, 0x7C, 0x7C, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x78, 0x78,
  0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x34, 0x3E, 0x3F,
  0x33, 0x30, 0xB0, 0xF0, 0xF8, 0xFF, 0xBF, 0xB0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00,
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0x1F, 0xFD, 0xF0, 0x30, 0x33, 0x33, 0x33, 0xF3, 0xF3, 0x33, 0x33,
  0xF3, 0xF3, 0xF3, 0x33, 0x33, 0x33, 0x30, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x3E, 0x7F, 0x7F,
  0x7F, 0x7F, 0x3E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
  0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F,
  0x3F, 0x34, 0x3C, 0x3E, 0x36, 0x37, 0x37, 0x33, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x37, 0x36,
  0x3E, 0x3C, 0x30, 0x30, 0x00, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x47, 0xC3, 0xE0, 0x70, 0x78, 0x3E,
  0x1F, 0x07, 0x00, 0x00, 0x3F, 0x7F, 0x7F, 0x60, 0x60, 0x7E, 0x7E, 0x1C
};

unsigned char signal_ban [] =
{ 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0x78, 0xFC, 0xEC, 0xCC, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x06, 0x04, 0x0C, 0x1C, 0x18, 0x78, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x18, 0x98, 0xD8, 0xD8,
  0xFF, 0xFF, 0xFF, 0xD8, 0xD8, 0x98, 0x18, 0x18, 0x98, 0xD8, 0x78, 0xFF, 0xFF, 0x78, 0xD8, 0x98,
  0x98, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
  0xFF, 0x01, 0x00, 0x00, 0x01, 0x01, 0x07, 0x0E, 0x0E, 0x1C, 0x70, 0x70, 0xE0, 0xC0, 0x80, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3C, 0x83, 0x83, 0x83, 0x99, 0x98, 0x9B, 0x9B, 0x9B, 0x98,
  0x99, 0x99, 0x9B, 0x9B, 0x99, 0x98, 0x98, 0x9B, 0x9B, 0x98, 0x98, 0x99, 0x83, 0x83, 0x81, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x18, 0x38,
  0x30, 0x30, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x61, 0x23, 0x37, 0x3E, 0x1C, 0x1E, 0x07,
  0x03, 0x00, 0x00, 0x21, 0x21, 0x31, 0x19, 0x1D, 0x0D, 0x07, 0x67, 0x61, 0x61, 0x61, 0x7F, 0x7F,
  0x3F, 0x01, 0x03, 0x07, 0x07, 0x0D, 0x1D, 0x19, 0x39, 0x11, 0x01, 0x30, 0x30, 0x30, 0x30, 0x3F,
  0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x00
};

unsigned char signal_bike [] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0xE8, 0x48, 0x40, 0x40, 0x40, 0x40, 0x40, 0x78,
  0xE8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0,
  0x40, 0x40, 0x60, 0x78, 0x78, 0x48, 0x40, 0x40, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0xE0, 0x78, 0x18, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xF0, 0xF0, 0x90, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0xF0, 0x1C, 0x04, 0x06, 0x02, 0x62, 0x7A, 0x4E, 0xCD, 0xFF, 0xE0, 0xE0,
  0x30, 0x98, 0xFC, 0x1E, 0x0F, 0x0F, 0x3E, 0x62, 0x06, 0x04, 0x1C, 0xF8, 0xC0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x02, 0xC3, 0xF1, 0xFC, 0xFE, 0x07, 0x0A, 0x08, 0x08, 0x08, 0x08, 0x08,
  0x08, 0xF8, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x38, 0x2F, 0x23, 0x20, 0x20, 0x20, 0xFE,
  0xFE, 0xFE, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x03, 0x0E, 0x08, 0x18, 0x10, 0x10, 0x10, 0x18,
  0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0E, 0x08, 0x18, 0x10, 0x10, 0x18, 0x08, 0x0E, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
  0x21, 0x21, 0x21, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x01, 0x01, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00,
  0x40, 0x40, 0x40, 0x40, 0x60, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0xFF, 0xFF, 0xFF, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
};

unsigned char signal_highway [] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0x72, 0x73, 0x73, 0x72, 0x72, 0x52, 0x72, 0x52, 0x72, 0x72, 0x73, 0x73, 0x72,
  0xFE, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xEC, 0xEC, 0xEC, 0x6C, 0x6C, 0x6C, 0x6F, 0x6F, 0x6F,
  0x6E, 0x6C, 0x6C, 0x6C, 0x6C, 0xEC, 0xEC, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x02, 0x0F, 0x3E, 0x7C,
  0x70, 0x00, 0x18, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0xFF, 0xFF, 0x98, 0x98, 0x98, 0x98, 0x98,
  0x98, 0x18, 0x18, 0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
  0x7C, 0x3C, 0x1C, 0xAC, 0xA4, 0x8C, 0x1D, 0x7D, 0x5F, 0xFF, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
  0xFD, 0xDF, 0xFF, 0xFD, 0xFD, 0xFC, 0xFC, 0x00, 0xF0, 0xF0, 0xF0, 0x37, 0x37, 0xB7, 0xB3, 0xB3,
  0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0x37, 0x37, 0xF0, 0xF0, 0xF0, 0x00, 0x06,
  0x06, 0x06, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0xBF, 0x99, 0xD9, 0xF9, 0xFF, 0xFF, 0xD9,
  0xD9, 0xD9, 0x99, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07,
  0x03, 0x01, 0x00, 0x00, 0x00, 0xE0, 0xF2, 0xF3, 0xF3, 0xF3, 0xF0, 0xE0, 0x00, 0x00, 0x01, 0x03,
  0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x7F, 0x7F, 0x7F, 0x00,
  0x00, 0x1F, 0x1F, 0x1F, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0F, 0x6F, 0x6F, 0x60, 0x60, 0x7F,
  0x7F, 0x3F, 0x00, 0x30, 0x70, 0x38, 0x1F, 0x1F, 0x38, 0x34, 0x7E, 0x6E, 0x67, 0x63, 0x63, 0x61,
  0x60, 0x6F, 0x6F, 0x60, 0x60, 0x61, 0x63, 0x63, 0x67, 0x66, 0x62, 0x00
};

/************************LCD初始化函数********************************/
void LCD_init(void)
{
  //先设置为输出
  pinMode(SCLK, OUTPUT);
  pinMode(SDIN, OUTPUT);
  pinMode(LCD_DC, OUTPUT);
  pinMode(LCD_CE, OUTPUT);
  pinMode(LCD_RST, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);

  digitalWrite( LCD_RST, LOW);// 产生一个让LCD复位的低电平脉冲
  delayMicroseconds(1);
  digitalWrite( LCD_RST, HIGH);

  // 关闭LCD
  digitalWrite( LCD_CE, LOW);
  delayMicroseconds(1);

  // 使能LCD
  digitalWrite( LCD_CE, HIGH); //LCD_CE = 1;
  delayMicroseconds(1);
  LCD_write_byte(0x21, 0); // 使用扩展命令设置LCD模式
  LCD_write_byte(0xc8, 0); // 设置偏置电压
  LCD_write_byte(0x06, 0); // 温度校正
  LCD_write_byte(0x13, 0); // 1:48
  LCD_write_byte(0x20, 0); // 使用基本命令
  LCD_clear();             // 清屏
  LCD_write_byte(0x0c, 0); // 设定显示模式，正常显示

  // 关闭LCD
  digitalWrite( LCD_CE, LOW);  //LCD_CE = 0;
  digitalWrite(9, HIGH);
  digitalWrite(10, LOW);
}

void LCD_clear(void)                                  //清屏函数
{
  unsigned int i;
  LCD_write_byte(0x0c, 0);
  LCD_write_byte(0x80, 0);
  for (i = 0; i < 504; i++)
  {
    LCD_write_byte(0, 1);
  }
}

void LCD_set_XY(unsigned char X, unsigned char Y)    //位置函数
{
  LCD_write_byte(0x40 | Y, 0);
  LCD_write_byte(0x80 | X, 0);
}

void LCD_write_char(unsigned char c)                 //ASCII字符显示函数
{
  unsigned char line;
  c -= 32;
  for (line = 0; line < 6; line++)
  {
    LCD_write_byte(font6x8[c][line], 1);
  }
}

void LCD_write_english_string(unsigned char X, unsigned char Y, char *s)    // string
{
  LCD_set_XY(X, Y);
  while (*s)
  {
    LCD_write_char(*s);
    s++;
  }
}

void LCD_write_byte(unsigned char dat, unsigned char command)
{
  unsigned char i;
  digitalWrite( LCD_CE, LOW); // 使能LCD_CE = 0
  if (command == 0)
  {
    digitalWrite( LCD_DC, LOW);// 传送命令 LCD_DC = 0;
  }
  else
  {
    digitalWrite( LCD_DC, HIGH);// 传送数据LCD_DC = 1;
  }

  for (i = 0; i < 8; i++)
  {
    if (dat & 0x80)
    {
      digitalWrite( SDIN, HIGH);//SDIN = 1;
    }
    else
    {
      digitalWrite( SDIN, LOW);//SDIN = 0;
    }
    digitalWrite( SCLK, LOW);//SCLK = 0;
    dat = dat << 1;
    digitalWrite( SCLK, HIGH);//SCLK = 1;
  }
  digitalWrite( LCD_CE, HIGH);//LCD_CE = 1;
}

void LCD_write_hanzi(unsigned char row, unsigned char page, unsigned char dd)   //汉字
{
  unsigned char i;
  LCD_set_XY(row * 8, page);
  for (i = 0; i < 12; i++)
  {
    LCD_write_byte(hanzi12x16[dd][i], 1);
  }
  LCD_set_XY(row * 8, page + 1);
  for (i = 12; i < 24; i++)
  {
    LCD_write_byte(hanzi12x16[dd][i], 1);
  }
}

void LCD_draw_bmp_pixel(unsigned char X, unsigned char Y, unsigned char *map, unsigned char Pix_x, unsigned char Pix_y)
{
  unsigned int i, n;
  unsigned char row;        //计算位图所占行数
  if (Pix_y % 8 == 0)       //如果为位图所占行数为整数
    row = Pix_y / 8;
  else
    row = Pix_y / 8 + 1;    //如果为位图所占行数不是整数
  LCD_set_XY(X, Y);
  for (n = 0; n < row; n++) //换行
  {
    for (i = 0; i < Pix_x; i++)
    { LCD_set_XY(X + i, Y + n);
      LCD_write_byte(map[i + n * Pix_x], 1);
    }
  }
}

void setup()
{
  LCD_init();//初始化液晶
  LCD_clear();
  delay(10) ;
  digitalWrite( 12, HIGH);
  LCD_draw_bmp_pixel(8, 0, logo, 68, 24);
  delay(800);
  LCD_write_english_string(10, 4, "Loading.");
  delay(800);
  LCD_write_english_string(10, 4, "Loading..");
  delay(800);
  LCD_write_english_string(10, 4, "Loading...");
  delay(800);
  digitalWrite( 12, LOW);
  LCD_clear();

  Serial.begin(9600);
  irrecv.enableIRIn(); // Start the receiver
}

unsigned long startime = millis();
void loop()
{
  unsigned long nowtime = millis();
  unsigned long runtime = nowtime - startime;
  if (runtime > 50000)
  {
    LCD_write_english_string(10, 0, "naked");
  }
  else if (runtime > 30000)
  {
    LCD_write_english_string(10, 0, "timer");
  }

  if (irrecv.decode(&results))
  {
    Serial.println(results.value, HEX);
    switch (results.value)
    {
      case 0x9716BE3F:  //1#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_train, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0x3D9AE3F7:  //2#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_bike, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0x6182021B:  //3#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_hospital, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0x8C22657B:  //4#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_ban, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0x488F3CBB:  //5#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_highway, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0x449E79F:  //6#
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_highway, 84, 24);
        LCD_write_english_string(20, 4, "Be careful");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      case 0xE318261B:  //关机键
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_ban, 84, 24);
        LCD_write_english_string(20, 4, "STOP");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;
      case 0x511DBB:  //MODE键
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_ban, 84, 24);
        LCD_write_english_string(20, 4, "YELLOW");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;
      case 0xEE886D7F:  //静音键
        LCD_clear();
        digitalWrite( 12, HIGH);
        LCD_draw_bmp_pixel(0, 0, signal_highway, 84, 24);
        LCD_write_english_string(20, 4, "KEEP RUNING");
        LCD_write_english_string(20, 5, "Signal resived");
        delay(2000);
        break;

      default:
        break;
    }
    irrecv.resume(); // Receive the next value
  }
  delay(100);
}